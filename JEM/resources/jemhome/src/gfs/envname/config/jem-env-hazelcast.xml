<hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-basic.xsd"
	xmlns="http://www.hazelcast.com/schema/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<properties>
		<property name="hazelcast.logging.type">log4j</property>
	</properties>

	<group>
		<name>#[jem.environment.name]</name>
		<password>#[jem.environment.password]</password>
	</group>

	<partition-group enabled="true" group-type="HOST_AWARE" />

	<network>
		<port auto-increment="true">5710</port>
		<join>
			<multicast enabled="true">
				<multicast-group>#[jem.multicast.group]</multicast-group>
				<multicast-port>#[jem.multicast.port]</multicast-port>
			</multicast>	
			<tcp-ip enabled="false">
				<interface>127.0.0.1</interface>
			</tcp-ip>
		</join>
		<interfaces enabled="#[jem.interfaces.enable]">
			<interface>#[jem.interface]</interface>
		</interfaces>
		<socket-interceptor enabled="#[jem.login.protocol.enable]">
			<class-name>org.pepstock.jem.node.security.socketinterceptor.NodeInterceptor</class-name>
			<properties>
				<!-- is the path of the keystore that contains the symmetric key used to crypt the login process -->
			    <property name="jem.keystore.path">${jem.persistence}/#[jem.environment.name]/keystores/#[jem.keystore.name]</property>
				<!-- is the path of the keystore that contains user certificate -->
			    <property name="jem.user.keystore.path">${jem.persistence}/#[jem.environment.name]/keystores/user_certificates_#[jem.environment.name].keystore</property>
			    <!-- is password of the kesystore -->
				<property name="jem.keystore.pwd">#[jem.keystore.pwd]</property>
				<!-- is the alias of the symmetric key inside keystore -->
				<property name="jem.crypt.key.alias">#[jem.environment.name]</property>
				<!-- is the password to access symmetric key inside keystore -->
				<property name="jem.crypt.key.pwd">#[jem.crypt.key.pwd]</property>
			</properties>
		</socket-interceptor>
	</network>
	<executor-service>
		<core-pool-size>16</core-pool-size>
		<max-pool-size>64</max-pool-size>
		<keep-alive-seconds>60</keep-alive-seconds>
	</executor-service>

	<map name="org.pepstock.jem.input">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>

		<map-store enabled="true">
			<!-- Name of the class implementing MapLoader and/or MapStore. The class 
				should implement at least of these interfaces and contain no-argument constructor. 
				Note that the inner classes are not supported. -->
			<class-name>org.pepstock.jem.node.persistence.InputMapManager</class-name>
			<!-- Number of seconds to delay to call the MapStore.store(key, value). 
				If the value is zero then it is write-through so MapStore.store(key, value) 
				will be called as soon as the entry is updated. Otherwise it is write-behind 
				so updates will be stored after write-delay-seconds value by calling Hazelcast.storeAll(map). 
				Default value is 0. -->
			<write-delay-seconds>0</write-delay-seconds>
		</map-store>
	</map>

	<map name="org.pepstock.jem.running">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>

		<map-store enabled="true">
			<!-- Name of the class implementing MapLoader and/or MapStore. The class 
				should implement at least of these interfaces and contain no-argument constructor. 
				Note that the inner classes are not supported. -->
			<class-name>org.pepstock.jem.node.persistence.RunningMapManager</class-name>
			<!-- Number of seconds to delay to call the MapStore.store(key, value). 
				If the value is zero then it is write-through so MapStore.store(key, value) 
				will be called as soon as the entry is updated. Otherwise it is write-behind 
				so updates will be stored after write-delay-seconds value by calling Hazelcast.storeAll(map). 
				Default value is 0. -->
			<write-delay-seconds>0</write-delay-seconds>
		</map-store>
	</map>
	
	<map name="org.pepstock.jem.output">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>

		<map-store enabled="true">
			<!-- Name of the class implementing MapLoader and/or MapStore. The class 
				should implement at least of these interfaces and contain no-argument constructor. 
				Note that the inner classes are not supported. -->
			<class-name>org.pepstock.jem.node.persistence.OutputMapManager</class-name>
			<!-- Number of seconds to delay to call the MapStore.store(key, value). 
				If the value is zero then it is write-through so MapStore.store(key, value) 
				will be called as soon as the entry is updated. Otherwise it is write-behind 
				so updates will be stored after write-delay-seconds value by calling Hazelcast.storeAll(map). 
				Default value is 0. -->
			<write-delay-seconds>0</write-delay-seconds>
		</map-store>
	</map>

	<map name="org.pepstock.jem.routing">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>

		<map-store enabled="true">
			<!-- Name of the class implementing MapLoader and/or MapStore. The class 
				should implement at least of these interfaces and contain no-argument constructor. 
				Note that the inner classes are not supported. -->
			<class-name>org.pepstock.jem.node.persistence.RoutingMapManager</class-name>
			<!-- Number of seconds to delay to call the MapStore.store(key, value). 
				If the value is zero then it is write-through so MapStore.store(key, value) 
				will be called as soon as the entry is updated. Otherwise it is write-behind 
				so updates will be stored after write-delay-seconds value by calling Hazelcast.storeAll(map). 
				Default value is 0. -->
			<write-delay-seconds>0</write-delay-seconds>
		</map-store>
	</map>

	<map name="org.pepstock.jem.common.resources">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>

		<map-store enabled="true">
			<!-- Name of the class implementing MapLoader and/or MapStore. The class 
				should implement at least of these interfaces and contain no-argument constructor. 
				Note that the inner classes are not supported. -->
			<class-name>org.pepstock.jem.node.persistence.CommonResourcesMapManager</class-name>
			<!-- Number of seconds to delay to call the MapStore.store(key, value). 
				If the value is zero then it is write-through so MapStore.store(key, value) 
				will be called as soon as the entry is updated. Otherwise it is write-behind 
				so updates will be stored after write-delay-seconds value by calling Hazelcast.storeAll(map). 
				Default value is 0. -->
			<write-delay-seconds>0</write-delay-seconds>
		</map-store>
	</map>

	<map name="org.pepstock.jem.roles">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>

		<map-store enabled="true">
			<!-- Name of the class implementing MapLoader and/or MapStore. The class 
				should implement at least of these interfaces and contain no-argument constructor. 
				Note that the inner classes are not supported. -->
			<class-name>org.pepstock.jem.node.persistence.RolesMapManager</class-name>
			<!-- Number of seconds to delay to call the MapStore.store(key, value). 
				If the value is zero then it is write-through so MapStore.store(key, value) 
				will be called as soon as the entry is updated. Otherwise it is write-behind 
				so updates will be stored after write-delay-seconds value by calling Hazelcast.storeAll(map). 
				Default value is 0. -->
			<write-delay-seconds>0</write-delay-seconds>
		</map-store>
	</map>
	
	<map name="org.pepstock.jem.routingConfig">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>

		<map-store enabled="true">
			<!-- Name of the class implementing MapLoader and/or MapStore. The class 
				should implement at least of these interfaces and contain no-argument constructor. 
				Note that the inner classes are not supported. -->
			<class-name>org.pepstock.jem.node.persistence.RoutingConfigMapManager</class-name>
			<!-- Number of seconds to delay to call the MapStore.store(key, value). 
				If the value is zero then it is write-through so MapStore.store(key, value) 
				will be called as soon as the entry is updated. Otherwise it is write-behind 
				so updates will be stored after write-delay-seconds value by calling Hazelcast.storeAll(map). 
				Default value is 0. -->
			<write-delay-seconds>0</write-delay-seconds>
		</map-store>
	</map>
	
	<map name="org.pepstock.jem.user.preferences">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>LRU</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">1000</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>

		<map-store enabled="true">
			<!-- Name of the class implementing MapLoader and/or MapStore. The class 
				should implement at least of these interfaces and contain no-argument constructor. 
				Note that the inner classes are not supported. -->
			<class-name>org.pepstock.jem.node.persistence.UserPreferencesMapManager</class-name>
			<!-- Number of seconds to delay to call the MapStore.store(key, value). 
				If the value is zero then it is write-through so MapStore.store(key, value) 
				will be called as soon as the entry is updated. Otherwise it is write-behind 
				so updates will be stored after write-delay-seconds value by calling Hazelcast.storeAll(map). 
				Default value is 0. -->
			<write-delay-seconds>0</write-delay-seconds>
		</map-store>
	</map>

	<!-- 
		This map is necessary to maintain Nodes info.
	 -->
	<map name="org.pepstock.jem.nodes">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>1</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
	</map>

	<!-- 
		This map is necessary only if GRS is USING! Be careful about the backup value
	 -->
	<map name="org.pepstock.jem.grs.counter_mutex">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>3</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>0</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
	</map>
	<!-- 
		This map is used during the routing process
	 -->
	<map name="org.pepstock.jem.routed">
		<!-- Number of backups. If 1 is set as the backup-count for example, then 
			all entries of the map will be copied to another JVM for fail-safety. 0 means 
			no backup. -->
		<backup-count>3</backup-count>
		<!-- Maximum number of seconds for each entry to stay in the map. Entries 
			that are older than <time-to-live-seconds> and not updated for <time-to-live-seconds> 
			will get automatically evicted from the map. Any integer between 0 and Integer.MAX_VALUE. 
			0 means infinite. Default is 0. -->
		<time-to-live-seconds>600</time-to-live-seconds>
		<!-- Maximum number of seconds for each entry to stay idle in the map. 
			Entries that are idle(not touched) for more than <max-idle-seconds> will 
			get automatically evicted from the map. Entry is touched if get, put or containsKey 
			is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. 
			Default is 0. -->
		<max-idle-seconds>0</max-idle-seconds>
		<!-- Valid values are: NONE (no eviction), LRU (Least Recently Used), LFU 
			(Least Frequently Used). NONE is the default. -->
		<eviction-policy>NONE</eviction-policy>
		<!-- Maximum size of the map. When max size is reached, map is evicted 
			based on the policy defined. Any integer between 0 and Integer.MAX_VALUE. 
			0 means Integer.MAX_VALUE. Default is 0. -->
		<max-size policy="cluster_wide_map_size">0</max-size>
		<!-- When max. size is reached, specified percentage of the map will be 
			evicted. Any integer between 0 and 100. If 25 is set for example, 25% of 
			the entries will get evicted. -->
		<eviction-percentage>25</eviction-percentage>
		<!-- While recovering from split-brain (network partitioning), map entries 
			in the small cluster will merge into the bigger cluster based on the policy 
			set here. When an entry merge into the cluster, there might an existing entry 
			with the same key already. Values of these entries might be different for 
			that same key. Which value should be set for the key? Conflict is resolved 
			by the policy set here. Default policy is hz.ADD_NEW_ENTRY There are built-in 
			merge policies such as hz.NO_MERGE ; no entry will merge. hz.ADD_NEW_ENTRY 
			; entry will be added if the merging entry's key doesn't exist in the cluster. 
			hz.HIGHER_HITS ; entry with the higher hits wins. hz.LATEST_UPDATE ; entry 
			with the latest update wins. -->
		<merge-policy>hz.ADD_NEW_ENTRY</merge-policy>
	</map>
</hazelcast>