<?xml version="1.0"?>
<project name="TEST_ANTUTILS_SCRIPT_LINUX" default="linux-bash" basedir=".">
	<description>
    	With JEM is very easy to create a JCL able to launch any kind of script you need.
    	Basically once defined the type of script you want to execute you just code in the
    	JCL the script and that's it.
    	Note that JEM is a set of nodes that can be Linux or Windows or others so often
    	you will need to launch a script in a specific node. To do so use affinity.
    	
		This example show you how to use bash, perl and pyton in JCL. The JCL
    	use affinity Linux to be shure that this JCL will be executed in a Linux node.
    </description>
	<!--
	JEM properties definition
	-->
	<property name="jem.job.name" value="TEST_ANTUTILS_SCRIPT_LINUX"/>
	<property name="jem.job.lockingScope" value="task"/>
	<property name="jem.job.affinity" value="linux"/>
	<!-- 
	<property name="jem.job.domain" value="domain"/>
	<property name="jem.job.environment" value="environment"/>
	-->	

	<taskdef name="shellscript" classname="org.pepstock.jem.ant.tasks.utilities.ShellScriptTask" />
	<taskdef name="bash" classname="org.pepstock.jem.ant.tasks.utilities.scripts.BashScriptTask" />
	<taskdef name="perl" classname="org.pepstock.jem.ant.tasks.utilities.scripts.PerlScriptTask" />
	<taskdef name="python" classname="org.pepstock.jem.ant.tasks.utilities.scripts.PythonScriptTask" />
	
	<!-- Whithout failonerror = true, even if the script command has error the job will not fail -->
	
	<!-- Remeber that bash does not interpret commands like ll becasue they are alias -->
	<target name="linux-bash">
		<!-- choose specific shell -->
		<shellscript shell="bash" suffix=".sh" failonerror="true">
			 MYVARIABLE='Hello this is a shell script'
			 echo $MYVARIABLE	
			 ls ${jem.output}	
		</shellscript>	
		<!-- use bash -->
		<bash suffix=".sh" failonerror="true">
		 	MYVARIABLE='Hello this is a bash script'
		 	echo $MYVARIABLE	
		 	ls ${jem.output}	
		</bash>
		<perl failonerror="true">
			 $myVariable = "Hello this is a perl script";
			 print $myVariable	
		</perl>
		<!-- note that in python indentation is critical so you cannot use tab
			 without reason -->
		<python failonerror="true">
myVariable="Hello this is a phyton script"
print (myVariable)				
		</python>
	</target>

</project>