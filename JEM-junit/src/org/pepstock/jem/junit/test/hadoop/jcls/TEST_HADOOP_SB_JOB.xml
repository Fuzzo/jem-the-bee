<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/batch"
    xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:hdp="http://www.springframework.org/schema/hadoop"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/batch 
           http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
           http://www.springframework.org/schema/hadoop 
           http://www.springframework.org/schema/hadoop/spring-hadoop.xsd">

	<!-- 
		Application Context
	 -->
	<beans:bean id="transactionManager"
        class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

	<beans:bean id="jobRepository" 
  		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
    	<beans:property name="transactionManager" ref="transactionManager"/>
	</beans:bean>

	<beans:bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
    	<beans:property name="jobRepository" ref="jobRepository" />
	</beans:bean>

	<hdp:configuration>
        fs.default.name=hdfs://192.168.163.135:8020
     </hdp:configuration>

	<!-- This is the best way to launch an hadoop job since every 
		 exception will be correctly notify to the client. Other options
		 such as tasklet-jar are not a good way to sumbmit and hadoop job
		 since exception during hadoop job execution will not be notified to
		 the client  -->
    <hdp:job-tasklet id="hadoop-tasklet" job-ref="word_count_job" wait-for-completion="true" />

    <hdp:job id="word_count_job" 
        input-path="/user/hue/jobsub/sample_data/" 
        output-path="/user/hue/jobsub/output/"
        mapper="org.apache.hadoop.examples.WordCount.TokenizerMapper"
        reducer="org.apache.hadoop.examples.WordCount.IntSumReducer"/>
	<!-- 
		Jem Props
		
		Jem Props
		
		as you can see we use the priorClassPath example this is because hadoop lib/ need to be loaded first in the classloader.
		
		Moreover to be able to launch this job you need to:
		1) load in jemhome/lib/ext the spring-data-hadoop-xxx.jar that fit with your hadoop 1.x distribution.
		2) load in the ${jem.classpath}/hadoop the cliet hadoop 1.x distribution
		3) load in the ${jem.classpath}/hadoop/lib the libraries needed by the client hadoop distribution
		4) load in the ${jem.classpath}/hodoop-application/ the hadoop-examples.jar containing among others the world count example

		you can find the needed jar inside the hadoop folder and you need an hortonworks hdp 1.3 hadoop server
	 -->

	<beans:bean id="jem.bean" class="org.pepstock.jem.springbatch.JemBean">
		<beans:property name="jobName" value="HADOOP" />
		<beans:property name="priorClassPath" value="${jem.classpath}/hadoop/*;${jem.classpath}/hadoop/lib/*;${jem.classpath}/hodoop-application/*" />
	</beans:bean>

	<!-- 
		Tasklet Defintion
	 -->

	<beans:bean id="null" class="org.pepstock.jem.springbatch.tasks.utilities.NullTasklet"/>

	<!-- 
		null: does nothing
	 -->
	<job id="TEST_HADOOP_SB_JOB">
		<step id="nothing" next="script">
			<tasklet ref="null" />
		</step>
    	<step id="script">
			<tasklet ref="hadoop-tasklet" />
		</step>

	</job>
	
</beans:beans>