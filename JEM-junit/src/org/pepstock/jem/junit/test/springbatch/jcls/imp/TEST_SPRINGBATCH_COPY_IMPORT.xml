<?xml version="1.0"?>
<project name="TEST_SPRINGBATCH_COPY_IMPORT" default="executeCopy" basedir=".">
	<description>
		This JCL is an example of how to copy file whithin a JCL using JEM 
		feautures. As you will see with jem feautures copy files using JCL
		will be very easy and exspecially you will not need absolute pat but
		you can use environment viriable to refer to the global file system
		so that your JCL will be platform independent.
    </description>
	
	<!--
	JEM properties definition
	-->
	<property name="jem.job.name" value="TEST_SPRINGBATCH_COPY_IMPORT"/>
	<!--
	ANT task definition
	-->
	<taskdef name="copy" classname="org.pepstock.jem.ant.tasks.utilities.CopyTask" />

	<!-- 
	COPY: copy the INPUT dataset to the OUTPUT dataset
	-->
	<target name="executeCopy">
		<delete file="${jem.source}/test_sb_import.xml"/>
		<copy>
			<dataDescription name="OUTPUT" disposition="NEW">
				<dataSet name="${jem.source}/test_sb_import.xml"/>
			</dataDescription>
			<dataDescription name="INPUT" disposition="SHR">
				<dataset><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
	<!-- 
		Application Context
	 -->
	<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager"/>
	</bean>
	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
</beans>]]></dataset>	
			</dataDescription>
		</copy>
	</target>
</project>